package com.poonam.simplymockito.feature.profileimport android.content.Contextimport android.content.Intentimport android.os.Bundleimport android.view.Viewimport android.widget.Buttonimport androidx.appcompat.app.AppCompatActivityimport androidx.cardview.widget.CardViewimport androidx.lifecycle.Observerimport androidx.lifecycle.ViewModelProviderimport androidx.lifecycle.ViewModelProvidersimport com.poonam.simplymockito.Rimport com.poonam.simplymockito.feature.data.GitUserProfileResponseimport com.poonam.simplymockito.utils.LiveDataResultimport com.poonam.simplymockito.utils.hideimport com.poonam.simplymockito.utils.isNetworkAvailableimport com.poonam.simplymockito.utils.showimport com.squareup.picasso.Picassoimport dagger.android.AndroidInjectionimport kotlinx.android.synthetic.main.activity_profile.*import kotlinx.android.synthetic.main.dialog_network.*import kotlinx.android.synthetic.main.dialog_network.view.*import javax.inject.Injectclass ProfileActivity : AppCompatActivity(), View.OnClickListener {    companion object {        fun newIntent(context: Context, userName: String): Intent {            return Intent(context, ProfileActivity::class.java).putExtra("userName", userName)        }    }    @Inject    lateinit var viewModelFactory: ViewModelProvider.Factory    private lateinit var retryButton : CardView    private val profileViewModel by lazy {        ViewModelProviders.of(this, viewModelFactory).get(ProfileViewModel::class.java)    }    override fun onCreate(savedInstanceState: Bundle?) {        AndroidInjection.inject(this)        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_profile)        initFunc()        setClickListener()    }    private fun initFunc() {        if (isNetworkAvailable()) {            setObservers()            setLoadingView()        } else {            setNetworkErrorView()        }    }    private fun setObservers() {        val userName = intent.getStringExtra("userName")        profileViewModel.getGitProfile(userName)        profileViewModel.profile.observe(this, profileObserver)    }    private fun setClickListener() {        ivBack.setOnClickListener(this)        ivBackData.setOnClickListener(this)        ivBackNetwork.setOnClickListener(this)        btnRetry.setOnClickListener{            initFunc()        }    }    private val profileObserver = Observer<LiveDataResult<GitUserProfileResponse>> {        it?.let {            when (it.status) {                LiveDataResult.Status.SUCCESS -> {                    tvRealName.text = it.data!!.name                    Picasso.with(this)                        .load(it.data.avatar_url)                        .into(ivProfile)                    tvBio.text = it.data.bio                    tvfollowers.text = it.data.followers.toString()                    tvfollowing.text = it.data.following.toString()                    setDataView()                }                LiveDataResult.Status.ERROR -> {                    setErrorView()                }                LiveDataResult.Status.LOADING -> {                    setLoadingView()                }            }        }    }    override fun onClick(v: View?) {        when (v!!.id) {            ivBack.id -> finish()            ivBackData.id -> finish()            ivBackNetwork.id -> finish()        }    }    private fun setDataView() {        claData.show()        pbLoading.hide()        clError.hide()        layoutNetwork.hide()    }    private fun setLoadingView() {        claData.hide()        pbLoading.show()        clError.hide()        layoutNetwork.hide()    }    private fun setErrorView() {        claData.hide()        pbLoading.hide()        clError.show()        layoutNetwork.hide()    }    private fun setNetworkErrorView() {        claData.hide()        pbLoading.hide()        clError.hide()        layoutNetwork.show()    }}