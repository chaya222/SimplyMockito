package com.poonam.simplymockito.di.moduleimport android.app.Applicationimport android.content.Contextimport com.google.gson.Gsonimport com.google.gson.GsonBuilderimport com.poonam.simplymockito.api.ApiInterfaceimport com.readystatesoftware.chuck.ChuckInterceptorimport dagger.Moduleimport dagger.Providesimport okhttp3.Cacheimport okhttp3.OkHttpClientimport okhttp3.logging.HttpLoggingInterceptorimport retrofit2.Retrofitimport retrofit2.adapter.rxjava2.RxJava2CallAdapterFactoryimport retrofit2.converter.gson.GsonConverterFactoryimport java.io.Fileimport javax.inject.Singleton@Moduleclass ApiModule {    @Provides    @Singleton    fun provideRetrofit(gson: Gson, okHttpClient: OkHttpClient): Retrofit {        return Retrofit.Builder()            .client(okHttpClient)            .addConverterFactory(GsonConverterFactory.create(gson))            .addCallAdapterFactory(RxJava2CallAdapterFactory.create())            .baseUrl("https://api.github.com/")            .build()    }    @Provides    @Singleton    fun provideGson(): Gson {        val gsonBuilder = GsonBuilder()        return gsonBuilder.create()    }    @Provides    @Singleton    fun provideHttpClient(cache: Cache, context: Context): OkHttpClient {        val logging = HttpLoggingInterceptor()        logging.level = HttpLoggingInterceptor.Level.BODY        return OkHttpClient.Builder()            .cache(cache)            .addInterceptor(logging)            .addNetworkInterceptor(ChuckInterceptor(context))            .build()    }    @Provides    @Singleton    internal fun providesCache(context: Context):Cache{        val cacheSize = (10 * 1024 * 1024).toLong()        val httpCacheDirectory = File(context.cacheDir,"http-cache")        return Cache(httpCacheDirectory,cacheSize)    }    @Provides    @Singleton    internal fun provideApiService(retrofit: Retrofit) : ApiInterface{        return retrofit.create(ApiInterface::class.java)    }}