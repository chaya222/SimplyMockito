package com.poonam.simplymockitoimport androidx.arch.core.executor.testing.InstantTaskExecutorRuleimport androidx.lifecycle.Observerimport com.poonam.simplymockito.feature.data.GitUserProfileResponseimport com.poonam.simplymockito.feature.profile.ProfileViewModelimport com.poonam.simplymockito.feature.repo.GitRepoimport com.poonam.simplymockito.utils.LiveDataResultimport io.reactivex.Observableimport org.junit.Assertimport org.junit.Beforeimport org.junit.Testimport org.junit.Ruleimport org.junit.runner.RunWithimport org.junit.runners.JUnit4import org.mockito.ArgumentMatchersimport org.mockito.Mockimport org.mockito.Mockitoimport org.mockito.Mockito.*import org.mockito.MockitoAnnotations@RunWith(JUnit4::class)class ProfileViewModelTest {    @get:Rule    val instantTaskExecutorRule = InstantTaskExecutorRule()    @Mock    lateinit var gitRepo: GitRepo    lateinit var profileViewModel: ProfileViewModel    @Before    fun setUp() {        MockitoAnnotations.initMocks(this)        this.profileViewModel = ProfileViewModel(gitRepo)    }    @Test    fun getGitProfile_PositiveResponse() {        Mockito.`when`(this.gitRepo.getGitProfile(ArgumentMatchers.anyString())).thenAnswer {            return@thenAnswer Observable.just(GitUserProfileResponse())            val observer = mock(Observable::class.java) as Observer<LiveDataResult<GitUserProfileResponse>>            this.profileViewModel.profile.observeForever(observer)            this.profileViewModel.getGitProfile(ArgumentMatchers.anyString())            Assert.assertNotNull(this.profileViewModel.profile.value)            Assert.assertEquals(LiveDataResult.Status.SUCCESS,this.profileViewModel.profile.value?.status)        }    }    @Test    fun getGitProfile_NegativeResponse() {        Mockito.`when`(this.gitRepo.getGitProfile(ArgumentMatchers.anyString())).thenAnswer {            return@thenAnswer Observable.error<Throwable>(Throwable("User does not exot"))            val observer = mock(Observable::class.java) as Observer<LiveDataResult<GitUserProfileResponse>>            this.profileViewModel.profile.observeForever(observer)            this.profileViewModel.getGitProfile(ArgumentMatchers.anyString())            Assert.assertNotNull(this.profileViewModel.profile.value)            Assert.assertEquals(LiveDataResult.Status.ERROR,this.profileViewModel.profile.value?.status)            assert(this.profileViewModel.profile.value?.err is Throwable)        }    }}